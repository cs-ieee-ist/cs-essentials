{"pageProps":{"contentData":{"topic":"gdb","page":"2-Core Files.md","contentHtml":"<h1>GDB - Debug with core files</h1>\n<p>A Core Dump is a file containing a process's address space (memory) when the process terminates unexpectedly. This file is very useful for debugging, for example, segmentation faults.</p>\n<h2>Generate a Core Dump file</h2>\n<p>Most systems by default have the core dump file generation disabled. We can check by running the following command:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">ulimit</span> -c</span>\n0</code></pre>\n<p>To enable the creation we need to run the following commands:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">ulimit</span> -c unlimited</span></code></pre>\n<h2>The program</h2>\n<p>To examplify how you can use the Core Dump and the GDB to better debug your programs, we will use this very simple program:</p>\n<pre><code class=\"hljs language-c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">char</span>* s = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">char</span> c = s[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<p>Now we can compile and run the program.</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> gcc -g example.c</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ./a.out</span>\nSegmentation fault (core dumped)</code></pre>\n<p>Make sure that the Core Dump file was created, you can use the \"ls\" command.</p>\n<h2>Debug</h2>\n<p>Now that we have the core file we can start the debug process.</p>\n<h3>Open GDB</h3>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> gdb a.out core</span>\nCore Dump was generated by `./a.out'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n<span class=\"hljs-meta\">#</span><span class=\"bash\">0  0x0000563a5b9f160a <span class=\"hljs-keyword\">in</span> nullPtr () at hello.c:3</span>\n3               char c = s[0];</code></pre>\n<p>The first thing we are going to do is use the \"backtrace\" command. A program when running maintains a call stack that contains information about the functions that have been called so far. Each item in the stack is a call frame, and each frame contains both the information needed to return to its caller and the information needed to provide the local variables of the function. Backtrace is used to get a stack trace from the time when the SIGSEGV was raised. Each frame in the stack has a number, where 0 is the most recent call. </p>\n<pre><code class=\"hljs language-shell\">(gdb) bt\n<span class=\"hljs-meta\">#</span><span class=\"bash\">0  0x0000563a5b9f160a <span class=\"hljs-keyword\">in</span> nullPtr () at hello.c:3</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">1  0x0000563a5b9f1621 <span class=\"hljs-keyword\">in</span> main () at hello.c:7</span></code></pre>\n<p>This example is trivial, but in normal cases, this backtrace is essential and gives the programmer a good idea of what the problem might be.</p>\n<p>In some cases it might be useful to use the \"frame\" command to gives us more information about each frame. For example the frame 0:</p>\n<pre><code class=\"hljs language-shell\">(gdb) frame 0\n<span class=\"hljs-meta\">#</span><span class=\"bash\">0  0x0000563a5b9f160a <span class=\"hljs-keyword\">in</span> nullPtr () at hello.c:3</span>\n3               char c = s[0];</code></pre>\n<p>This information is the same given by the debugger when we started. This is because the operation \"s[0]\" is trying to access an invalid memory position (0x0), which is the problem with our program.</p>\n"},"topicPages":[{"topic":"gdb","page":"Introduction"},{"topic":"gdb","page":"Commands"},{"topic":"gdb","page":"Core Files"},{"topic":"gdb","page":"GUI"},{"topic":"gdb","page":"Assembly"}]},"__N_SSG":true}