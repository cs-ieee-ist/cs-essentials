{"pageProps":{"contentData":{"topic":"vim","page":"5-Customization.md","contentHtml":"<h1>Vim - Customization</h1>\n<h2>Vimrc</h2>\n<h3>What is vimrc?</h3>\n<p>The vimrc file contains optional runtime configuration settings to initialize Vim when it starts.\r\nThe file is named <code>.vimrc</code></p>\n<p>Lines that begin with \" are comments and are not read by vim.</p>\n<p>To customize Vim for editing a specific file, or a specific type of file, you can use modelines, or auto commands, or filetype plugins.</p>\n<h3>Where is vimrc?</h3>\n<p>A default Vim installation will feature a file containing Vimâ€™s core global settings called vimrc. This file will be located at either /etc/vim/vimrc or etc/vimrc, depending on your linux distribution.</p>\n<p>But you can create a local vimrc file, the configurations in this file will apply only to the active user account. If you don't have a local vimrc file yet, you can simply create one in your home folder. Normally the home folder is designated by ~ so you can simply create ~/.vimrc</p>\n<p>Now you have an empty .vimrc file, in the following topic, we will help you create a simple but useful vim configuration.</p>\n<h3>Basics configs - Example</h3>\n<pre><code class=\"hljs language-vbnet\"><span class=\"hljs-string\">\" URL: http://vim.wikia.com/wiki/Example_vimrc\r\n\"</span> Authors: http://vim.wikia.com/wiki/Vim_on_Freenode\r\n<span class=\"hljs-string\">\" Description: A minimal, but feature-rich, example .vimrc. If you are a\r\n\"</span>              newbie, basing your first .vimrc <span class=\"hljs-keyword\">on</span> this file <span class=\"hljs-built_in\">is</span> a good choice.\r\n<span class=\"hljs-string\">\"              If you're a more advanced user, building your own .vimrc based\r\n\"</span>              <span class=\"hljs-keyword\">on</span> this file <span class=\"hljs-built_in\">is</span> still a good idea.\r\n \r\n<span class=\"hljs-string\">\"------------------------------------------------------------\r\n\"</span> Features {{{<span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-string\">\"\r\n\"</span> These options <span class=\"hljs-built_in\">and</span> commands enable some very useful features <span class=\"hljs-keyword\">in</span> Vim, that\r\n<span class=\"hljs-string\">\" no user should have to live without.\r\n \r\n\"</span> <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-comment\">'nocompatible' to ward off unexpected things that your distro might</span>\r\n<span class=\"hljs-string\">\" have made, as well as sanely reset options when re-sourcing .vimrc\r\nset nocompatible\r\n \r\n\"</span> Attempt <span class=\"hljs-keyword\">to</span> determine the type <span class=\"hljs-keyword\">of</span> a file based <span class=\"hljs-keyword\">on</span> its name <span class=\"hljs-built_in\">and</span> possibly its\r\n<span class=\"hljs-string\">\" contents. Use this to allow intelligent auto-indenting for each filetype,\r\n\"</span> <span class=\"hljs-built_in\">and</span> <span class=\"hljs-keyword\">for</span> plugins that are filetype specific.\r\nfiletype indent plugin <span class=\"hljs-keyword\">on</span>\r\n \r\n<span class=\"hljs-string\">\" Enable syntax highlighting\r\nsyntax on\r\n \r\n \r\n\"</span>------------------------------------------------------------\r\n<span class=\"hljs-string\">\" Must have options {{{1\r\n\"</span>\r\n<span class=\"hljs-string\">\" These are highly recommended options.\r\n \r\n\"</span> Vim <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">default</span> settings does <span class=\"hljs-built_in\">not</span> allow easy switching between multiple files\r\n<span class=\"hljs-string\">\" in the same editor window. Users can use multiple split windows or multiple\r\n\"</span> tab pages <span class=\"hljs-keyword\">to</span> edit multiple files, but it <span class=\"hljs-built_in\">is</span> still best <span class=\"hljs-keyword\">to</span> enable an <span class=\"hljs-keyword\">option</span> <span class=\"hljs-keyword\">to</span>\r\n<span class=\"hljs-string\">\" allow easier switching between files.\r\n\"</span>\r\n<span class=\"hljs-string\">\" One such option is the 'hidden' option, which allows you to re-use the same\r\n\"</span> window <span class=\"hljs-built_in\">and</span> switch <span class=\"hljs-keyword\">from</span> an unsaved buffer without saving it first. Also allows\r\n<span class=\"hljs-string\">\" you to keep an undo history for multiple files when re-using the same window\r\n\"</span> <span class=\"hljs-keyword\">in</span> this way. Note that <span class=\"hljs-keyword\">using</span> persistent undo also lets you undo <span class=\"hljs-keyword\">in</span> multiple\r\n<span class=\"hljs-string\">\" files even in the same window, but is less efficient and is actually designed\r\n\"</span> <span class=\"hljs-keyword\">for</span> keeping undo history after closing Vim entirely. Vim will complain <span class=\"hljs-keyword\">if</span> you\r\n<span class=\"hljs-string\">\" try to quit without saving, and swap files will keep you safe if your computer\r\n\"</span> crashes.\r\n<span class=\"hljs-keyword\">set</span> hidden\r\n \r\n<span class=\"hljs-string\">\" Note that not everyone likes working this way (with the hidden option).\r\n\"</span> Alternatives include <span class=\"hljs-keyword\">using</span> tabs <span class=\"hljs-built_in\">or</span> split windows instead <span class=\"hljs-keyword\">of</span> re-<span class=\"hljs-keyword\">using</span> the same\r\n<span class=\"hljs-string\">\" window as mentioned above, and/or either of the following options:\r\n\"</span> <span class=\"hljs-keyword\">set</span> confirm\r\n<span class=\"hljs-string\">\" set autowriteall\r\n \r\n\"</span> Better command-line completion\r\n<span class=\"hljs-keyword\">set</span> wildmenu\r\n \r\n<span class=\"hljs-string\">\" Show partial commands in the last line of the screen\r\nset showcmd\r\n \r\n\"</span> Highlight searches (use &#x3C;C-L> <span class=\"hljs-keyword\">to</span> temporarily turn <span class=\"hljs-keyword\">off</span> highlighting; see the\r\n<span class=\"hljs-string\">\" mapping of &#x3C;C-L> below)\r\nset hlsearch\r\n \r\n\"</span> Modelines have historically been a source <span class=\"hljs-keyword\">of</span> security vulnerabilities. <span class=\"hljs-keyword\">As</span>\r\n<span class=\"hljs-string\">\" such, it may be a good idea to disable them and use the securemodelines\r\n\"</span> script, &#x3C;http://www.vim.org/scripts/script.php?script_id=<span class=\"hljs-number\">1876</span>>.\r\n<span class=\"hljs-string\">\" set nomodeline\r\n \r\n \r\n\"</span>------------------------------------------------------------\r\n<span class=\"hljs-string\">\" Usability options {{{1\r\n\"</span>\r\n<span class=\"hljs-string\">\" These are options that users frequently set in their .vimrc. Some of them\r\n\"</span> change Vim<span class=\"hljs-comment\">'s behaviour in ways which deviate from the true Vi way, but</span>\r\n<span class=\"hljs-string\">\" which are considered to add usability. Which, if any, of these options to\r\n\"</span> use <span class=\"hljs-built_in\">is</span> very much a personal preference, but they are harmless.\r\n \r\n<span class=\"hljs-string\">\" Use case insensitive search, except when using capital letters\r\nset ignorecase\r\nset smartcase\r\n \r\n\"</span> Allow backspacing over autoindent, line breaks <span class=\"hljs-built_in\">and</span> start <span class=\"hljs-keyword\">of</span> insert action\r\n<span class=\"hljs-keyword\">set</span> backspace=indent,eol,start\r\n \r\n<span class=\"hljs-string\">\" When opening a new line and no filetype-specific indenting is enabled, keep\r\n\"</span> the same indent <span class=\"hljs-keyword\">as</span> the line you<span class=\"hljs-comment\">'re currently on. Useful for READMEs, etc.</span>\r\n<span class=\"hljs-keyword\">set</span> autoindent\r\n \r\n<span class=\"hljs-string\">\" Stop certain movements from always going to the first character of a line.\r\n\"</span> <span class=\"hljs-keyword\">While</span> this behaviour deviates <span class=\"hljs-keyword\">from</span> that <span class=\"hljs-keyword\">of</span> Vi, it does what most users\r\n<span class=\"hljs-string\">\" coming from other editors would expect.\r\nset nostartofline\r\n \r\n\"</span> Display the cursor position <span class=\"hljs-keyword\">on</span> the last line <span class=\"hljs-keyword\">of</span> the screen <span class=\"hljs-built_in\">or</span> <span class=\"hljs-keyword\">in</span> the status\r\n<span class=\"hljs-string\">\" line of a window\r\nset ruler\r\n \r\n\"</span> Always display the status line, even <span class=\"hljs-keyword\">if</span> only one window <span class=\"hljs-built_in\">is</span> displayed\r\n<span class=\"hljs-keyword\">set</span> laststatus=<span class=\"hljs-number\">2</span>\r\n \r\n<span class=\"hljs-string\">\" Instead of failing a command because of unsaved changes, instead raise a\r\n\"</span> dialogue asking <span class=\"hljs-keyword\">if</span> you wish <span class=\"hljs-keyword\">to</span> save changed files.\r\n<span class=\"hljs-keyword\">set</span> confirm\r\n \r\n<span class=\"hljs-string\">\" Use visual bell instead of beeping when doing something wrong\r\nset visualbell\r\n \r\n\"</span> <span class=\"hljs-built_in\">And</span> reset the terminal code <span class=\"hljs-keyword\">for</span> the visual bell. <span class=\"hljs-keyword\">If</span> visualbell <span class=\"hljs-built_in\">is</span> <span class=\"hljs-keyword\">set</span>, <span class=\"hljs-built_in\">and</span>\r\n<span class=\"hljs-string\">\" this line is also included, vim will neither flash nor beep. If visualbell\r\n\"</span> <span class=\"hljs-built_in\">is</span> unset, this does <span class=\"hljs-literal\">nothing</span>.\r\n<span class=\"hljs-keyword\">set</span> t_vb=\r\n \r\n<span class=\"hljs-string\">\" Enable use of the mouse for all modes\r\nset mouse=a\r\n \r\n\"</span> <span class=\"hljs-keyword\">Set</span> the command window height <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">2</span> lines, <span class=\"hljs-keyword\">to</span> avoid many cases <span class=\"hljs-keyword\">of</span> having <span class=\"hljs-keyword\">to</span>\r\n<span class=\"hljs-string\">\" \"</span>press &#x3C;Enter> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">continue</span><span class=\"hljs-string\">\"\r\nset cmdheight=2\r\n \r\n\"</span> Display line numbers <span class=\"hljs-keyword\">on</span> the left\r\n<span class=\"hljs-keyword\">set</span> number\r\n \r\n<span class=\"hljs-string\">\" Quickly time out on keycodes, but never time out on mappings\r\nset notimeout ttimeout ttimeoutlen=200\r\n \r\n\"</span> Use &#x3C;F11> <span class=\"hljs-keyword\">to</span> toggle between <span class=\"hljs-comment\">'paste' and 'nopaste'</span>\r\n<span class=\"hljs-keyword\">set</span> pastetoggle=&#x3C;F11>\r\n \r\n \r\n<span class=\"hljs-string\">\"------------------------------------------------------------\r\n\"</span> Indentation options {{{<span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-string\">\"\r\n\"</span> Indentation settings according <span class=\"hljs-keyword\">to</span> personal preference.\r\n \r\n<span class=\"hljs-string\">\" Indentation settings for using 4 spaces instead of tabs.\r\n\"</span> <span class=\"hljs-keyword\">Do</span> <span class=\"hljs-built_in\">not</span> change <span class=\"hljs-comment\">'tabstop' from its default value of 8 with this setup.</span>\r\n<span class=\"hljs-keyword\">set</span> shiftwidth=<span class=\"hljs-number\">4</span>\r\n<span class=\"hljs-keyword\">set</span> softtabstop=<span class=\"hljs-number\">4</span>\r\n<span class=\"hljs-keyword\">set</span> expandtab\r\n \r\n<span class=\"hljs-string\">\" Indentation settings for using hard tabs for indent. Display tabs as\r\n\"</span> four characters wide.\r\n<span class=\"hljs-string\">\"set shiftwidth=4\r\n\"</span><span class=\"hljs-keyword\">set</span> tabstop=<span class=\"hljs-number\">4</span>\r\n \r\n \r\n<span class=\"hljs-string\">\"------------------------------------------------------------\r\n\"</span> Mappings {{{<span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-string\">\"\r\n\"</span> Useful mappings\r\n \r\n<span class=\"hljs-string\">\" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,\r\n\"</span> which <span class=\"hljs-built_in\">is</span> the <span class=\"hljs-keyword\">default</span>\r\nmap Y y$\r\n \r\n<span class=\"hljs-string\">\" Map &#x3C;C-L> (redraw screen) to also turn off search highlighting until the\r\n\"</span> <span class=\"hljs-keyword\">next</span> search\r\nnnoremap &#x3C;C-L> :nohl&#x3C;CR>&#x3C;C-L>\r\n \r\n<span class=\"hljs-string\">\"------------------------------------------------------------\n</span></code></pre>\n<h2>Plugins and Plugin Manager</h2>\n<h3>Plugins</h3>\n<h4>Install plugins manually (Vim 8 and above)</h4>\n<p>A Vim package is a directory containing one or more plugins. By default, your Vim settings are contained in ~/.vim, so that's where Vim looks for plugins when you launch it.</p>\n<p>When you start Vim, it first processes your .vimrc file, and then it scans all directories in ~/.vim for plugins contained in pack/*/start.</p>\n<p>By default, your ~/.vim directory (if you even have one) has no such file structure, so set that up with:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"bash\"><span class=\"hljs-built_in\">mkdir</span> -p ~/.vim/pack/vendor/start</span>\n</code></pre>\n<p>For example, try installing <a href=\"https://github.com/preservim/nerdtree\">NERDTree</a>, a text-based file manager for Vim. First, use Git to clone a snapshot of the NERDTree repository:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/preservim/nerdtree.git ~/.vim/pack/vendor/start/nerdtree</span>\r\nvim -u NONE -c \"helptags ~/.vim/pack/vendor/start/nerdtree/doc\" -c q\n</code></pre>\n<p>Launch Vim, and type this command:</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-symbol\">:NERDTree</span>\n</code></pre>\n<h4>Some Usefull Plugins</h4>\n<p>Here are some Vim plugins that may be useful:</p>\n<ol>\n<li><a href=\"https://github.com/preservim/nerdtree\">NERDTree</a> is a file system explorer for the Vim editor.</li>\n<li><a href=\"https://github.com/airblade/vim-gitgutter\">gitgutter</a> is a Vim plugin that shows a git diff in the sign column. It shows which lines have been added, modified, or removed.</li>\n<li><a href=\"https://github.com/vim-scripts/taglist.vim\">TagList</a> is a source code browser plugin for Vim and provides an overview of the structure of the source code files and allows you to efficiently browse through source code files for different programming languages.</li>\n<li><a href=\"https://github.com/itchyny/lightline.vim\">Lightline</a> a light and configurable statusline/tabline plugin for Vim.</li>\n<li><a href=\"https://github.com/jiangmiao/auto-pairs\">Auto-Pairs</a> insert or delete brackets, parens, quotes in pairs.</li>\n<li><a href=\"https://github.com/mileszs/ack.vim\">ack</a> run your favorite search tool from Vim, with an enhanced results list.</li>\n</ol>\n<h3>Plugin Manager</h3>\n<h4>Do I really need a plugin manager?</h4>\n<p>No. Plugin managers have always been and will always be optional.</p>\n<h4>What is the benefits of using a plugin manager?</h4>\n<p>A plugin manager may be useful if:</p>\n<ul>\n<li>you use too many plugins,</li>\n<li>you like to try new plugins,</li>\n<li>you absolutely want your plugins to be always up-to-date.</li>\n</ul>\n<p>If you use too many plugins, the usual installation scheme will likely become too messy very quickly.\r\nPlugin managers usually keep track of what is installed and where in order to make the whole thing easier for the user.</p>\n<p>If you like to try new plugins, plugin managers usually make it easier to install/remove individual plugins.</p>\n<p>If you absolutely want your plugins to be always up-to-date, plugin managers usually give you commands for updating or even auto-updating individual plugins.</p>\n<h4>Some Plugins Managers</h4>\n<p>There are several plugin managers, a plugin manager is the cleanest way to install plugins in vim, such as:</p>\n<ul>\n<li><a href=\"https://github.com/tpope/vim-pathogen\">Pathogen</a></li>\n<li><a href=\"https://github.com/VundleVim/Vundle.vim\">Vundle</a></li>\n<li><a href=\"https://github.com/junegunn/vim-plug\">VimPlug</a></li>\n<li><a href=\"https://github.com/Shougo/neobundle.vim\">NeoBundle</a></li>\n</ul>\n<h2>How to Do 90% of What Plugins Do With Just Vim?</h2>\n<p>This section will be heavily inspired on a lecture sponsored by <a href=\"https://www.youtube.com/watch?v=XA2WjJbmmoM&#x26;vl=en\">thoughtbot</a>. In this sub-topic we will talk about fuzzy file search, tag jumping and autocomplete, if you want to see file browsing and snippets, you might consider watching the lecture.</p>\n<p>Note that this section is not to discourage you to use plugins, the objective of this section is to show you that vim is a lot powerful.</p>\n<h3>Fuzzy File Search</h3>\n<p>If you want a fuzzy file search vim has git your back without a plugin!</p>\n<p>Add this to you .vimrc file</p>\n<pre><code class=\"hljs language-lua\"><span class=\"hljs-built_in\">path</span> +=**\n</code></pre>\n<p>This will allow vim so search for files in sub-directories and so on of a root directory.</p>\n<p>With this trick, you do not need a Fuzzy File Search in Vim, because now your vim is capable of accessing a file deep in a file tree.\r\nLet's consider the following directory tree</p>\n<pre><code class=\"hljs language-shell\">topics\r\n|\r\n|-- bash\r\n|   |- introdution1.md\r\n|   |- permissions.md\r\n|\r\n|-- vim\r\n|   |- introdution2.md\r\n|   |- movement.md\r\n|\r\n|-- git\r\n|   |- introdution3.md\r\n|   |- blobs\r\n|   |   |- firstBlob.md\r\n|   |   |- secontBlob.md\r\n|   |   |- cBlob.c\n</code></pre>\n<p>For this, to work you have to start vim in the root directory (topics).\r\nNow you want to work in vim's movement.md file, you just type in vim the command:</p>\n<pre><code class=\"hljs language-arduino\">:find movement.md\n</code></pre>\n<p>You can also tab so vim will know what file you are talking about and complete.</p>\n<p>If you tab and there is more than one match vim will present you with the various matches and you choose</p>\n<pre><code class=\"hljs language-arduino\">:find intro\n</code></pre>\n<p>and then you tab, vim will present you the three possibilities introdution1.md, introdution2.md, introdution3.md. You can navigate in the choices that vims gives you with tabs.</p>\n<p>Back to our example, so we use <strong>:find movement.md</strong> and we are in /topics/vim/movement.md, now we want to work on secondBlob.md, but that file is in another directory it is in /topics/git/blobs/secondBlob.md, we can!!! That is why we started vim in the root directory topics. You just need to do</p>\n<pre><code class=\"hljs language-arduino\">:find secontBlob.md\n</code></pre>\n<p>This is a lot more powerful, like a normal fuzzy finder you can search using file types</p>\n<pre><code class=\"hljs language-arduino\">:find *.c\n</code></pre>\n<p>It will open the cBlob.c</p>\n<h3>Tag jumping</h3>\n<p>You can use Tags, and jump between Tags without using a plugin, here's how!</p>\n<p>Using tags makes it easier to jump to certain parts of your programs. First run ctags from the UNIX command line on your source files ( to generate a <em><strong>tags</strong></em> file, then use these while editing your source files:</p>\n<table>\n<thead>\n<tr>\n<th>Tags Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:tag TAB</td>\n<td>list the known tags</td>\n</tr>\n<tr>\n<td>:tag function_name</td>\n<td>jump to that function</td>\n</tr>\n<tr>\n<td>ctrl-t</td>\n<td>goes to the previous spot where you called :tag</td>\n</tr>\n<tr>\n<td>ctrl-]</td>\n<td>calls :tag on the word under the cursor</td>\n</tr>\n<tr>\n<td>:ptag</td>\n<td>open tag in preview window (also ctrl-w })</td>\n</tr>\n<tr>\n<td>:pclose</td>\n<td>close preview window</td>\n</tr>\n</tbody>\n</table>\n<h3>Autocomplete</h3>\n<p>You have several auto-complete plugins such as AouCompleteMe.\r\nBut Vim has Autocomplete built-in if you just hit Ctrl + n while in insert mode, and you'll get a list of word suggestions.\r\nTo make the list cycle backward, hit Ctrl + p. You can also use the arrow keys to move up and down the list.</p>\n<table>\n<thead>\n<tr>\n<th>Autocomplete Keys</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctrl-x + ctrl-n</td>\n<td>for just this file</td>\n</tr>\n<tr>\n<td>ctrl-x + ctrl-f</td>\n<td>for filenames (works with our path trick!)</td>\n</tr>\n<tr>\n<td>ctrl-x + ctrl-J</td>\n<td>for tags only</td>\n</tr>\n<tr>\n<td>ctrl-n</td>\n<td>for anything specified by the 'complete' option and next on the list</td>\n</tr>\n<tr>\n<td>ctrl-p</td>\n<td>previous on the list</td>\n</tr>\n</tbody>\n</table>"},"topicPages":[{"topic":"vim","page":"Introduction"},{"topic":"vim","page":"Basics"},{"topic":"vim","page":"Movement"},{"topic":"vim","page":"Interface"},{"topic":"vim","page":"Reg and Macros"},{"topic":"vim","page":"Customization"},{"topic":"vim","page":"CheatSheet"},{"topic":"vim","page":"Further Reading"}]},"__N_SSG":true}