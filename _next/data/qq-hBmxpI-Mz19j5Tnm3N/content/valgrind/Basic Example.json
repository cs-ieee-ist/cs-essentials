{"pageProps":{"contentData":{"topic":"valgrind","page":"1-Basic Example.md","contentHtml":"<h1>Valgrind - Basic Example</h1>\n<p>In this section we'll take a look at a basic use case of Valgrind so that we get a grasp of how this works before we dive into the cool stuff.</p>\n<p>Let's say you have a file <code>main.c</code> which contains the following code:</p>\n<pre><code class=\"hljs language-c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&#x3C;stdio.h></span></span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title hljs-function\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span>\r\n{\r\n\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Hi there, %s!\\n\"</span>, argv[<span class=\"hljs-number\">1</span>]);\r\n\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\n</code></pre>\n<p>Let's compile it like this:</p>\n<pre><code class=\"hljs language-bash\">gcc -g -o my-prog main.c\n</code></pre>\n<p>We're passing the <code>-g</code> flag so that the application is compiled with debugging info enabled, and the <code>-o</code> flag so that we can specify the output executable name (we'll call it \"my-prog\" because we're very creative).</p>\n<p>To execute the compiled program with Valgrind, we just need to:</p>\n<pre><code class=\"hljs language-bash\">valgrind ./my-prog Bob\n</code></pre>\n<p>This will output something like the following:</p>\n<pre><code class=\"hljs language-vbnet\">==<span class=\"hljs-number\">29723</span>== Memcheck, a memory <span class=\"hljs-keyword\">error</span> detector\r\n==<span class=\"hljs-number\">29723</span>== Copyright (C) <span class=\"hljs-number\">2002</span>-<span class=\"hljs-number\">2017</span>, <span class=\"hljs-built_in\">and</span> GNU GPL<span class=\"hljs-comment\">'d, by Julian Seward et al.</span>\r\n==<span class=\"hljs-number\">29723</span>== <span class=\"hljs-keyword\">Using</span> Valgrind-<span class=\"hljs-number\">3.13</span>.<span class=\"hljs-number\">0</span> <span class=\"hljs-built_in\">and</span> LibVEX; rerun <span class=\"hljs-keyword\">with</span> -h <span class=\"hljs-keyword\">for</span> copyright info\r\n==<span class=\"hljs-number\">29723</span>== Command: ./my-prog Bob\r\n==<span class=\"hljs-number\">29723</span>== \r\nHi there, Bob!\r\n==<span class=\"hljs-number\">29723</span>== \r\n==<span class=\"hljs-number\">29723</span>== HEAP SUMMARY:\r\n==<span class=\"hljs-number\">29723</span>==     <span class=\"hljs-keyword\">in</span> use at <span class=\"hljs-keyword\">exit</span>: <span class=\"hljs-number\">0</span> bytes <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> blocks\r\n==<span class=\"hljs-number\">29723</span>==   total heap usage: <span class=\"hljs-number\">1</span> allocs, <span class=\"hljs-number\">1</span> frees, <span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">096</span> bytes allocated\r\n==<span class=\"hljs-number\">29723</span>== \r\n==<span class=\"hljs-number\">29723</span>== All heap blocks were freed -- no leaks are possible\r\n==<span class=\"hljs-number\">29723</span>== \r\n==<span class=\"hljs-number\">29723</span>== <span class=\"hljs-keyword\">For</span> counts <span class=\"hljs-keyword\">of</span> detected <span class=\"hljs-built_in\">and</span> suppressed errors, rerun <span class=\"hljs-keyword\">with</span>: -v\r\n==<span class=\"hljs-number\">29723</span>== <span class=\"hljs-keyword\">ERROR</span> SUMMARY: <span class=\"hljs-number\">0</span> errors <span class=\"hljs-keyword\">from</span> <span class=\"hljs-number\">0</span> contexts (suppressed: <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-number\">0</span>)\n</code></pre>\n<p>Now, there's a few things to note:</p>\n<ul>\n<li>Valgrind tools' output has the form <code>==12345== &#x3C;some-message-from-Valgrind></code>. The <code>12345</code> is the process ID.</li>\n<li>You can see the output of the program before the heap summary: <code>Hi there, Bob!</code></li>\n<li>The heap usage mentions an allocation - we didn't do that. It was actually <code>printf</code> that did that internally.</li>\n</ul>\n<p>Try to run a basic example such as this one yourself, and then keep reading the tutorial to learn about how Valgrind can make your life a lot easier!</p>"},"topicPages":[{"topic":"valgrind","page":"Introduction"},{"topic":"valgrind","page":"Basic Example"},{"topic":"valgrind","page":"Memory Leaks"}]},"__N_SSG":true}