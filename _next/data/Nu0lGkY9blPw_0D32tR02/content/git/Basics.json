{"pageProps":{"contentData":{"topic":"git","page":"1-Basics.md","contentHtml":"<h1>Git - Basics</h1>\n<h2>Start Repository</h2>\n<p>Typically to start a repository you can do two things:</p>\n<ul>\n<li>Turn a local directory into a Git repository</li>\n<li>Clone an existing Git repository (Github for example).</li>\n</ul>\n<h3>Create a Repository from a Directory</h3>\n<p>First, we need to go to the project's directory.</p>\n<pre><code class=\"language-bash\">$ cd /home/user/my_project\n</code></pre>\n<p>To create a repository we just need to type the following:</p>\n<pre><code class=\"language-bash\">$ git init\n</code></pre>\n<p>This created a new subdirectory named <code>.git</code>, this contains all of the necessary files for the Git repository. See <a href=\"https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain#ch10-git-internals\">Git Internals</a> for more information about exactly what files are contained in the .git directory you just created.</p>\n<p><strong>Track a file</strong></p>\n<p>Let's create a file just as an example</p>\n<pre><code class=\"language-bash\">$ echo \"Hello World\" > hello.txt\n</code></pre>\n<p>To start version-controlling (track) the <code>hello.txt</code> file we use the <code>git add</code> command, followed by the <code>git commit</code> command:</p>\n<pre><code class=\"language-bash\">$ git add hello.txt\r\n$ git commit -m 'First commit'\n</code></pre>\n<p>Congrats you just created your first repository.</p>\n<h3>Cloning an Existing Repository</h3>\n<p>If you want to get a copy of an existing Git repository, for example, <a href=\"https://github.com/cs-ieee-ist/cs-essentials\">CS Essentials</a>, the command you need is <code>git clone &#x3C;url></code>.</p>\n<pre><code class=\"language-bash\">$ git clone https://github.com/cs-ieee-ist/cs-essentials.git\n</code></pre>\n<p>This creates a directory named <code>cs-essentials</code>, with a .git directory already inside, and all the files from the current version of the repository.</p>\n<h2>Record Changes</h2>\n<p>Now that we have a new repository we can start making changes. Each file in your working directory can be in one of two states:</p>\n<ul>\n<li><strong>Tracked</strong> - files that were in the last snapshot</li>\n<li><strong>Untracked</strong> - files in your working directory that were not in your last snapshot and are not in your staging area</li>\n</ul>\n<p>As you edit files, Git sees them as modified, because youâ€™ve changed them since your last commit. As you work, you selectively stage these modified files and then commit all those staged changes, and the cycle repeats.</p>\n<h3>Current Status</h3>\n<p>To check to repository current status we use the <code>git status</code> command, for example:</p>\n<pre><code>$ git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nnothing to commit, working directory clean\n</code></pre>\n<p>Imagine that you just added two new files to the project, for example, a <code>README.md</code> and a <code>CONTRIBUTING.md</code>, and you run the status command after that:</p>\n<pre><code class=\"language-bash\">$ echo 'My Project' > README.md\r\n$ echo 'Contribute' > CONTRIBUTING.md\r\n$ git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nUntracked files:\r\n  (use \"git add &#x3C;file>...\" to include in what will be committed)\r\n    CONTRIBUTING.md\r\n    README.md\r\n\r\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre>\n<p>Note that the current state of our new file <code>README</code> is <strong>Untracked</strong></p>\n<h3>Track File</h3>\n<p>In order to begin tracking a new file, we use the command <code>git add</code>, for example:</p>\n<pre><code class=\"language-bash\">$ git add README.md\r\n$ git add CONTRIBUTING.md\n</code></pre>\n<p>Now if we run the status command again the result will be different:</p>\n<pre><code class=\"language-bash\">$ git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nChanges to be committed:\r\n  (use \"git rm --cached &#x3C;file>...\" to unstage)\r\n        new file:   CONTRIBUTING.md\r\n        new file:   README.md\n</code></pre>\n<p>Both files are now staged. But what happens when we modify one of them and run the status command after, for example, the <code>CONTRIBUTING.md</code>:</p>\n<pre><code class=\"language-bash\"> echo \"- Introduction\" >> CONTRIBUTING.md\r\n$ git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nChanges to be committed:\r\n  (use \"git rm --cached &#x3C;file>...\" to unstage)\r\n        new file:   CONTRIBUTING.md\r\n        new file:   README.md\r\n\r\nChanges not staged for commit:\r\n  (use \"git add &#x3C;file>...\" to update what will be committed)\r\n  (use \"git restore &#x3C;file>...\" to discard changes in working directory)\r\n        modified:   CONTRIBUTING.md\n</code></pre>\n<p>Now the <code>CONTRIBUTING.md</code> is staged and unstaged. This means that if we commit (more about that later) now, the version of CONTRIBUTING.md as it was when you last ran the git add command is how it will go into the commit, not the version of the file as it looks in your working directory now. So we just need to run <code>git add</code> again to stage the latest version of the file:</p>\n<pre><code class=\"language-bash\">$ git add CONTRIBUTING.md\n</code></pre>\n<h3>Commit</h3>\n<p>Now that we have made all the changes we wanted and they are all staged, we can make our fist commit. To commit we use the <code>git commit</code> command, for example:</p>\n<pre><code class=\"language-bash\">$ git commit -m \"first commit\"\n</code></pre>\n<p>The <code>-m</code> flag allows us to type the commit message inline, otherwise, an Editor would show up.</p>\n<p>You can read the <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository\">Book</a> for more in-depth information</p>"},"topicPages":[{"topic":"git","page":"Introduction"},{"topic":"git","page":"Basics"},{"topic":"git","page":"Branching"},{"topic":"git","page":"Remotes"},{"topic":"git","page":"Commands"}]},"__N_SSG":true}